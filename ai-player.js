/**
 * AI PLAYER MODULE
 *
 * Handles computer opponent logic for single-player mode.
 *
 * Features:
 * - Automatic dice rolling
 * - Intelligent move selection based on validMovesTable
 * - Animated piece movement
 * - Turn management with delays for readability
 * - Priority-based decision making
 *
 * Dependencies:
 * - game-core.js (requires: validMovesTable, rollPlayerDice, performMove, checkTurnCompletion)
 * - game-ui.js (optional: for visual feedback)
 */

// ============================================================================
// AI STATE
// ============================================================================

/**
 * –§–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @type {boolean}
 */
let isComputerMoving = false;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∏–≥—Ä–æ–∫–æ–≤
 * @type {Array<{playerNum: number, type: 'human'|'computer'}>}
 */
let playerTypes = [];

/**
 * –°–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
 * @type {{diceRoll: number, moveExecution: number, betweenMoves: number}}
 */
let aiSpeed = {
    diceRoll: 1000,      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–æ–º –∫—É–±–∏–∫–æ–≤
    moveExecution: 800,  // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—é —Ö–æ–¥–∞
    betweenMoves: 600    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ö–æ–¥–∞–º–∏
};

// ============================================================================
// INITIALIZATION
// ============================================================================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã
 * @param {Array<{playerNum: number, type: 'human'|'computer'}>} types - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
 * @example
 * initPlayerTypes([
 *   {playerNum: 1, type: 'human'},
 *   {playerNum: 2, type: 'computer'},
 *   {playerNum: 3, type: 'human'},
 *   {playerNum: 4, type: 'computer'}
 * ]);
 */
function initPlayerTypes(types) {
    playerTypes = types;
    console.log('ü§ñ –¢–∏–ø—ã –∏–≥—Ä–æ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', playerTypes);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –∏–≥—Ä–æ–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞ (1-4)
 * @returns {'human'|'computer'|null}
 */
function getPlayerType(playerNum) {
    const player = playerTypes.find(p => p.playerNum === playerNum);
    return player ? player.type : null;
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @param {'slow'|'fast'|'instant'} speed - –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
 */
function setAISpeed(speed) {
    switch (speed) {
        case 'instant':
            aiSpeed = { diceRoll: 100, moveExecution: 200, betweenMoves: 100 };
            break;
        case 'fast':
            aiSpeed = { diceRoll: 300, moveExecution: 400, betweenMoves: 200 };
            break;
        case 'slow':
        default:
            aiSpeed = { diceRoll: 1000, moveExecution: 800, betweenMoves: 600 };
            break;
    }
    console.log('ü§ñ –°–∫–æ—Ä–æ—Å—Ç—å –ò–ò —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:', speed, aiSpeed);
}

// ============================================================================
// AI DECISION MAKING
// ============================================================================

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
 * @param {Array} validMoves - –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤ (validMovesTable)
 * @returns {Array|null} –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ö–æ–¥ –∏–ª–∏ null
 *
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
 * 1. formulaResult = 3 (–¥–≤–∞ —Ö–æ–¥–∞ –≤–æ–∑–º–æ–∂–Ω—ã)
 * 2. formulaResult = 2 (–æ–¥–∏–Ω —Ö–æ–¥ –∏–ª–∏ –¥—É–±–ª—å)
 * 3. –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ —Ö–æ–¥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
 * 4. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ START_ZONE
 * 5. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –≤–ø–µ—Ä–µ–¥ –ø–æ –ø—É—Ç–∏
 */
function selectBestMove(validMoves) {
    if (!validMoves || validMoves.length === 0) {
        return null;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ö–æ–¥—ã –ø–æ formulaResult (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞)
    const movesByPriority = validMoves.reduce((acc, move) => {
        const formulaResult = move[move.length - 1];
        if (!acc[formulaResult]) acc[formulaResult] = [];
        acc[formulaResult].push(move);
        return acc;
    }, {});

    // –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    let bestMoves = movesByPriority[3] || movesByPriority[2] || movesByPriority[1] || [];

    if (bestMoves.length === 0) {
        return null;
    }

    // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º - –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
    const randomIndex = Math.floor(Math.random() * bestMoves.length);
    const selectedMove = bestMoves[randomIndex];

    console.log(`ü§ñ –ò–ò –≤—ã–±—Ä–∞–ª —Ö–æ–¥ –∏–∑ ${bestMoves.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (formulaResult = ${selectedMove[selectedMove.length - 1]}):`, selectedMove);

    return selectedMove;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ö–æ–¥ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ —Ñ–∏—à–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
 * @param {Array} move - –•–æ–¥ –∏–∑ validMovesTable [coord1, coord2, target1, target2, canMove1, canMove2, diceComp, formula]
 * @returns {Array<{from: string, to: string}>} –ú–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
 */
function analyzeMoveSequence(move) {
    const [coord1, coord2, target1, target2, canMove1, canMove2, diceComparison, formulaResult] = move;
    const moves = [];

    if (formulaResult === 3) {
        // –î–≤–∞ —Ö–æ–¥–∞: coord1‚Üítarget1, coord2‚Üítarget2
        if (canMove1) moves.push({ from: coord1, to: target1 });
        if (canMove2) moves.push({ from: coord2, to: target2 });
    } else if (formulaResult === 2 || formulaResult === 1) {
        // –û–¥–∏–Ω —Ö–æ–¥: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if (canMove1) {
            moves.push({ from: coord1, to: target1 });
        } else if (canMove2) {
            moves.push({ from: coord2, to: target2 });
        }
    }

    return moves;
}

// ============================================================================
// AI MOVE EXECUTION
// ============================================================================

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 * @param {string} fromCoord - –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
 * @param {string} toCoord - –¶–µ–ª–µ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
 */
async function executeMoveWithAnimation(fromCoord, toCoord, playerNum) {
    console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥: ${fromCoord} ‚Üí ${toCoord}`);

    try {
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–∏—à–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        const piece = findPieceAtCoord(fromCoord, playerNum);

        if (!piece) {
            console.error(`ü§ñ –§–∏—à–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ ${fromCoord} –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerNum}`);
            return false;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ —á–µ—Ä–µ–∑ –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
        const moveResult = performMove(piece, toCoord);

        if (moveResult) {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            await delay(aiSpeed.moveExecution);
            return true;
        }

        return false;
    } catch (error) {
        console.error('ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞:', error);
        return false;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞-–∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @returns {Promise<void>}
 */
async function performComputerMove(playerNum) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if (isComputerMoving) {
        console.warn('‚ö†Ô∏è –ö–æ–º–ø—å—é—Ç–µ—Ä —É–∂–µ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–∑–æ–≤');
        return;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    isComputerMoving = true;

    try {
        console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ù–∞—á–∏–Ω–∞–µ—Ç —Ö–æ–¥`);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (typeof updateGameMessage === 'function') {
            updateGameMessage(`ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum} –¥—É–º–∞–µ—Ç...`);
        }

        // 1. –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –±—Ä–æ—Å–∫–æ–º –∫—É–±–∏–∫–æ–≤
        await delay(aiSpeed.diceRoll);

        // 2. –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤
        console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏`);
        rollPlayerDice(playerNum);

        // 3. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è validMovesTable (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ handleGamePlay)
        await delay(500);

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤
        if (!validMovesTable || validMovesTable.length === 0) {
            console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤`);

            if (typeof updateGameMessage === 'function') {
                updateGameMessage(`ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum} –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥`);
            }

            // checkTurnCompletion –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫
            return;
        }

        // 5. –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
        const selectedMove = selectBestMove(validMovesTable);

        if (!selectedMove) {
            console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Ö–æ–¥`);
            return;
        }

        // 6. –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤
        const moveSequence = analyzeMoveSequence(selectedMove);

        if (moveSequence.length === 0) {
            console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–æ–≤`);
            return;
        }

        // 7. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–æ–≤
        for (let i = 0; i < moveSequence.length; i++) {
            const { from, to } = moveSequence[i];

            if (typeof updateGameMessage === 'function') {
                updateGameMessage(`ü§ñ –ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum} –¥–µ–ª–∞–µ—Ç —Ö–æ–¥ ${i + 1}/${moveSequence.length}`);
            }

            const success = await executeMoveWithAnimation(from, to, playerNum);

            if (!success) {
                console.error(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –•–æ–¥ ${i + 1} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
                break;
            }

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
            if (i < moveSequence.length - 1) {
                await delay(aiSpeed.betweenMoves);
            }
        }

        // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ performMove ‚Üí checkTurnCompletion)
        console.log(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –•–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω`);

    } catch (error) {
        console.error(`ü§ñ [–ö–æ–º–ø—å—é—Ç–µ—Ä ${playerNum}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:`, error);
    } finally {
        // –°–Ω—è—Ç–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–í–°–ï–ì–î–ê)
        isComputerMoving = false;
    }
}

// ============================================================================
// INTEGRATION HOOKS
// ============================================================================

/**
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä–æ–∫–∞ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å nextPlayer)
 * @param {number} newPlayerNum - –ù–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 */
function onPlayerChanged(newPlayerNum) {
    const playerType = getPlayerType(newPlayerNum);

    if (playerType === 'computer') {
        console.log(`ü§ñ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ - –∫–æ–º–ø—å—é—Ç–µ—Ä (${newPlayerNum}), –∑–∞–ø—É—Å–∫–∞–µ–º —Ö–æ–¥`);

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
        setTimeout(() => {
            if (!isComputerMoving) {
                performComputerMove(newPlayerNum);
            }
        }, 800);
    } else if (playerType === 'human') {
        console.log(`üë§ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ - —á–µ–ª–æ–≤–µ–∫ (${newPlayerNum})`);

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è UI –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞
        if (typeof enableDiceRollForCurrentPlayer === 'function') {
            enableDiceRollForCurrentPlayer();
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
 * @returns {boolean}
 */
function isComputerPlayer(playerNum) {
    return getPlayerType(playerNum) === 'computer';
}

/**
 * –ë–ª–æ–∫–∏—Ä—É–µ—Ç UI –¥–ª—è —Ö–æ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
 */
function disableUIForComputer(playerNum) {
    if (isComputerPlayer(playerNum)) {
        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫—É–±–∏–∫–æ–≤
        document.querySelectorAll('.dice-button').forEach(btn => {
            btn.disabled = true;
            btn.style.opacity = '0.5';
            btn.style.cursor = 'not-allowed';
        });

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∏—à–µ–∫
        document.querySelectorAll('.piece').forEach(piece => {
            piece.draggable = false;
            piece.style.cursor = 'default';
        });
    }
}

// ============================================================================
// UTILITY FUNCTIONS
// ============================================================================

/**
 * –ü—Ä–æ–º–∏—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è setTimeout
 * @param {number} ms - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Promise<void>}
 */
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Ñ–∏—à–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 * @param {string} coord - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
 * @param {number} playerNum - –ù–æ–º–µ—Ä –∏–≥—Ä–æ–∫–∞
 * @returns {HTMLElement|null}
 */
function findPieceAtCoord(coord, playerNum) {
    if (!gameBoard[coord]) return null;

    const piecesAtCoord = Array.isArray(gameBoard[coord]) ? gameBoard[coord] : [gameBoard[coord]];

    for (const pieceId of piecesAtCoord) {
        const piece = document.getElementById(pieceId);
        if (piece && piece.dataset.player == playerNum) {
            return piece;
        }
    }

    return null;
}

// ============================================================================
// EXPORTS (for future modularization)
// ============================================================================

// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –º–æ–¥—É–ª—å:
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        initPlayerTypes,
        getPlayerType,
        setAISpeed,
        performComputerMove,
        onPlayerChanged,
        isComputerPlayer,
        disableUIForComputer,
        selectBestMove,
        delay
    };
}
